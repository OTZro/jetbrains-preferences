<application>
  <component name="VimEditorSettings">
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry>ATTACHMENT</entry>
        <entry>WebSocket</entry>
        <entry>message_group_member</entry>
        <entry>isCross</entry>
        <entry>inBlack</entry>
        <entry>user</entry>
        <entry>$user</entry>
        <entry>projectGro</entry>
        <entry>follow</entry>
        <entry>attachment</entry>
        <entry>users_compos</entry>
        <entry encoding="base64">XDxyZXF1ZXN0XD4=</entry>
        <entry encoding="base64">XDxmdW5jdGlvblw+</entry>
        <entry encoding="base64">XDx1c2VcPg==</entry>
        <entry encoding="base64">XDxwdWJsaWNcPg==</entry>
        <entry>keyword</entry>
        <entry>csrf</entry>
        <entry>picture</entry>
        <entry encoding="base64">XDxDb250cmFjdHNcPg==</entry>
        <entry>:136</entry>
      </history-search>
      <history-cmd>
        <entry>107</entry>
        <entry>70</entry>
        <entry>116</entry>
        <entry>238</entry>
        <entry>141</entry>
        <entry encoding="base64">JzwsJz4yMzk5</entry>
        <entry>2399</entry>
        <entry>2424</entry>
        <entry>202</entry>
        <entry>140</entry>
        <entry>36</entry>
        <entry>99</entry>
        <entry>529</entry>
        <entry>50</entry>
        <entry>109</entry>
        <entry>17</entry>
        <entry>138</entry>
        <entry>w</entry>
        <entry>624</entry>
        <entry>1260</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/gofreight/fms/static/freight/plugins/ui-select/select.js" timestamp="1592462614620">
        <mark key="[" line="1274" column="76" />
        <mark key="]" line="1273" column="0" />
        <mark key="^" line="1276" column="22" />
        <mark key="." line="1273" column="0" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/shipment/air/export_basic_entry/index.js" timestamp="1592464811774" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/shipment/status.controller.js" timestamp="1592460285832">
        <mark key="[" line="48" column="0" />
        <mark key="]" line="48" column="0" />
        <mark key="." line="48" column="0" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/shipment/ocean/import_my_shipment/index.html" timestamp="1592449042737" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/lib/angular/shared-component/hc-location-select/hc-location-select.component.html" timestamp="1592449212848" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/component/core/auto_complete/vessel_select.component.js" timestamp="1592449305780" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/component/core/auto_complete/trade_partner_select.html" timestamp="1592452870595" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/lib/angular/shared-component/hc-tp-select/hc-tp-select.component.html" timestamp="1592461546550" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/accounting/invoice.service.js" timestamp="1592454676182">
        <mark key="[" line="177" column="0" />
        <mark key="]" line="177" column="0" />
        <mark key="." line="177" column="0" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/shipment/air/export_basic_entry/index.html" timestamp="1592465085047" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/shipment/ocean/import_basic_entry/index.js" timestamp="1592460382000" />
      <file name="$USER_HOME$/gofreight/fms/app/freight/func/shipment/views_ocean.py" timestamp="1592453689394" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/component/core/auto_complete/location_select.component.js" timestamp="1592452843609" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/lib/angular/shared-component/hc-autocomplete-base/hc-autocomplete-base.component.ts" timestamp="1592462495225">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/component/core/auto_complete/location_select.component.html" timestamp="1592452840150">
        <mark key="[" line="7" column="0" />
        <mark key="." line="7" column="53" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/component/core/auto_complete/auto_complete.service.js" timestamp="1592449399899" />
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/approval/setting/approval-rule.service.text_def.ts" timestamp="1592463410578">
        <mark key="[" line="4" column="29" />
        <mark key="]" line="4" column="29" />
        <mark key="." line="4" column="29" />
        <mark key="^" line="4" column="65" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/shipment/ocean/import_basic_entry/index.html" timestamp="1592460802151">
        <mark key="[" line="50" column="20" />
        <mark key="]" line="232" column="108" />
        <mark key="." line="232" column="108" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/page/freight/shipment/basic_entry.controller.js" timestamp="1592462501854">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/gofreight/fms/frontend/src/lib/angular/shared-component/hc-tp-select/hc-tp-select.component.ts" timestamp="1592451758105">
        <mark key="[" line="176" column="47" />
      </file>
    </filemarks>
    <jumps>
      <jump line="1236" column="63" filename="$USER_HOME$/gofreight/fms/app/freight/views_reports/utility.py" />
      <jump line="1232" column="4" filename="$USER_HOME$/gofreight/fms/app/freight/views_reports/utility.py" />
      <jump line="134" column="29" filename="$USER_HOME$/gofreight/fms/app/jobflow/views.py" />
      <jump line="69" column="39" filename="$USER_HOME$/gofreight/fms/frontend/src/page/freight/approval/setting/app.component.html" />
      <jump line="0" column="0" filename="$USER_HOME$/gofreight/fms/frontend/src/page/freight/approval/setting/app.component.html" />
      <jump line="5" column="4" filename="$USER_HOME$/gofreight/fms/frontend/src/component_form/trade_partner/form_trade_partner_info_picker.html" />
      <jump line="28" column="0" filename="$USER_HOME$/gofreight/fms/frontend/src/lib/angular/bootstrap-tool/hc-popover-hover.directive.ts" />
      <jump line="163" column="39" filename="$USER_HOME$/gofreight/fms/frontend/src/page/freight/sales/trade_partner_entry/index.html" />
      <jump line="6" column="19" filename="$USER_HOME$/gofreight/fms/frontend/src/page/freight/approval/setting/rule.type.ts" />
      <jump line="34" column="24" filename="/amendment.py" />
      <jump line="8" column="34" filename="$USER_HOME$/gofreight/fms/frontend/src/page/freight/accounting/prepaid_expanse/app.component.text_def.ts" />
      <jump line="45" column="105" filename="$USER_HOME$/gofreight/fms/test/accounting/transaction/updater/utility.py" />
      <jump line="118" column="4" filename="$USER_HOME$/gofreight/fms/test/accounting/transaction/updater/utility.py" />
      <jump line="52" column="82" filename="$USER_HOME$/gofreight/fms/frontend/src/page/freight/approval/center/app.component.html" />
      <jump line="24" column="42" filename="$USER_HOME$/gofreight/fms/app/accounting/transaction/db_updater/amortization.py" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="a" type="4">
        <keys>
          <key char="70" code="0" mods="0" />
          <key char="60" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="36" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="&quot;" type="4">
        <text>All pending submissions will be canceled. Are you sure you want to delete?</text>
      </register>
      <register name="b" type="4">
        <keys>
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="91" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="93" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="91" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="93" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="118" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="c" type="4">
        <keys>
          <key char="94" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="40" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="41" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="d" type="4">
        <text>2ddj2dd</text>
      </register>
      <register name="f" type="4">
        <keys>
          <key char="108" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="91" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="93" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="91" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="93" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="j" type="4">
        <text>2ddkkkk2dd</text>
      </register>
      <register name="l" type="4">
        <keys>
          <key char="108" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="-" type="4">
        <text>All pending submissions will be canceled. Are you sure you want to delete?</text>
      </register>
      <register name="m" type="4">
        <keys>
          <key char="48" code="0" mods="0" />
          <key char="71" code="0" mods="0" />
          <key char="49" code="0" mods="0" />
          <key char="71" code="0" mods="0" />
          <key char="79" code="0" mods="0" />
          <key char="60" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="71" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="63" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="113" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="n" type="4">
        <keys>
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="/" type="4">
        <text>:136</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgICAgICBwcmludCgnPT09PT09PScpCg==</text>
      </register>
      <register name="p" type="4">
        <keys>
          <key char="99" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="59" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="95" code="0" mods="0" />
          <key char="40" code="0" mods="0" />
          <key char="39" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgICAgY29uc29sZS5sb2coZS50YXJnZXQpOwo=</text>
      </register>
      <register name="q" type="4">
        <text>kkjk</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICBkZWJ1Z2dlcgo=</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="4" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="t" type="4">
        <keys>
          <key char="106" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="110" code="0" mods="0" />
          <key char="103" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="113" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="119" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="111" code="0" mods="0" />
          <key char="114" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="106" code="0" mods="0" />
          <key char="56" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="v" type="4">
        <keys>
          <key char="94" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="104" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="99" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="118" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="117" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="45" code="0" mods="0" />
          <key char="115" code="0" mods="0" />
          <key char="109" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="7" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="w" type="4">
        <keys>
          <key char="94" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="91" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="102" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="93" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="8" type="2">
        <text encoding="base64">CiAgZnVuY3Rpb24gaXNBbWVuZG1lbnRQZW5kaW5nT3JBcHByb3ZlZChpbnYpIHsKICAgIGNvbnN0IGlzUGVuZGluZyA9IGlzQW1lbmRtZW50U3RhdHVzUGVuZGluZyhpbnYuYXBwcm92YWxfc3RhdHVzKTsKICAgIGNvbnN0IGlzQXBwcm92ZWQgPSBpc0FtZW5kbWVudChpbnYpICYmIGlzTm9ybWFsKGludik7CiAgICByZXR1cm4gaXNQZW5kaW5nIHx8IGlzQXBwcm92ZWQ7CiAgfQo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="y" type="4">
        <text />
      </register>
      <register name=":" type="4">
        <text>1260</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-dir>0</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="false" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>